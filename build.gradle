println '#################################################'
println '   BRForgers GradleBuilding:'
// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'

group= "cf.brforgers.core"
archivesBaseName = "BRCore"

// Define properties file
ext.configFile = file "build.properties"

configFile.withReader {
    // Load config.  It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

dependencies {}

version = "${project.config.mod_version}" + (System.getenv("BUILD_NUMBER") != null ? "-build" + System.getenv("BUILD_NUMBER") : "")

println " Minecraft: " + config.mc_version + "-" + config.forge_version
// Setup the forge minecraft plugin data. Specify the preferred forge/minecraft version here
minecraft {
    version = config.mc_version + "-" + config.forge_version
    runDir = "run"
	mappings = "snapshot_20160518"
	makeObfSourceJar = false
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mc_version", config.mc_version
    //inputs.property "ccl_version", config.ccl_version

    // Replace properties in info files
    from(sourceSets.main.resources.srcDirs) {
        include '*.info'
        expand 'version': project.version, 'mc_version': config.mc_version//,'ccl_version':config.ccl_version
    }

    // Move access transformer to META-INF
    rename '(.+_at.cfg)', 'META-INF/$1'
}

version = "${project.minecraft.version}-${project.version}"

println " Building: ${archivesBaseName} v${version}"

idea.module.inheritOutputDirs = true

def commonManifest = {
    attributes 'FMLCorePlugin': 'cf.brforgers.core.launch.BRCorePlugin'
    attributes 'FMLAT': 'ccc_at.cfg'
}

jar {
    //classifier = 'universal'
    manifest commonManifest
    //into('lib') {
    //    from configurations.obfLibs
    //}
}

//task sourceJar(type: Jar) {
//    from sourceSets.main.java
//    classifier = 'src'
//}

task devJar(type: Jar) {
    from sourceSets.main.java
    from sourceSets.main.output
    classifier = 'dev'
    manifest commonManifest
}

// Tell the artifact system about our extra jars
artifacts {
    archives devJar//, sourceJar
}
